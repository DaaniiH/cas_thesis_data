---
title: "CAS thesis data"
author: "DaaniiH"
date: 2025-06-01

execute:
  warning: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: true
    code-summary: "Code anzeigen" # Optional, Text für den Aufklapp-Link
    code-tools: true              # Optional, Toolbar für Code-Chunks
    number-sections: true
    max-width: none
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
theme: bootstrap
---

# Libraries

```{r}
#| label: load_libraries


library(readr)
library(readxl)
library(pxmake)   # to load PX files
library(pxR)      # to load PX files
library(jsonlite) # to load JSON files

library(purrr)

library(writexl)  # Write Excel files

library(dplyr)
library(tidyverse)
library(ggplot2)  # Diagrams
library(ggforce)  # Diagrams
library(DT)       # datatable()

library(DescTools)
```

# Functions

```{r}
#| label: load_functions


### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###  
# Duplikate in df finden & als $unique oder $duplicates selektionierbar machen
find_and_remove_duplicates <- function(df) {
  list(
    unique = df[!duplicated(df), ],
    duplicates = df[duplicated(df) | duplicated(df, fromLast = TRUE), ]
  )
}



### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###  
# Aktive National- & Ständeräte identifizieren und selektionierbar machen

filter_active <- function(data, von, bis) {
  von <- as.Date(von)
  bis <- as.Date(bis)
  data %>%
    filter(
      DateJoining <= bis,                      # Eintritt vor/am Ende d. Zeitraums
      is.na(DateLeaving) | DateLeaving >= von  # Kein Austritt/nach Beginn des Z..
    )
}




### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###  
# 




```

# **ETL: Extract, Transform, Load**

-   Daten werden aus verschiedenen Excel-Dateien ausgelesen, unabhängig davon, wie komplex oder verschachtelt sie sind (z. B. mehrere Sheets, verbundene Zellen, unterteilte Datenblöcke).

-   Bei Excel-Dateien mit mehreren Sheets werden Functions angewendet.

-   Header werden identifiziert und ggf. aus mehreren Zeilen zusammengesetzt.

-   Daten werden bereinigt, normalisiert und in das gewünschte Zielformat gebracht (z. B. Wide zu Long, Entfernen von Leerzeilen, Auflösen von verbundenen Zellen, Vereinheitlichung der Spaltenstruktur).

-   Die transformierten Daten werden für die weitere Analyse und Visualisation zu Verfügung gestellt.

Kantone

```{r}

#lookup_elec_nationalrat_canton 

#lookup_elec_nationalrat_parties 


```

## Abstimmungen

```{r}
#| label: load_voting


# Schweizweite Abstimmungen
voting_raw <- read_delim("~/CAS/Zertifikatsarbeit/data/votes/abstimmungen_swissvotes_DATASET CSV 09-02-2025.csv",
                     delim = ";",
                     escape_double = FALSE,
                     trim_ws = TRUE,
                     show_col_types = FALSE)

# Datum formatieren
voting_raw <- voting_raw %>% 
  mutate(datum = dmy(datum))

# Einträge vor 2020 löschen
voting_5y <- voting_raw %>%
  filter(datum >= as.Date("2020-01-01"))


# Abstimmungsdaten der letzten 5 Jahre in Vektor schreiben für spätere Selektion
voting_5y_dates <- voting_5y %>%
  select(datum) %>%
  distinct() %>%
  pull(datum) %>%
  as.character()

# Abstimmungen ab 2020 in datatable() anzeigen
datatable(voting_5y,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))



# Parteien aus Parolen (p- & pdev-..-..) zwecks Lookup/Vereinheitlichung in df schreiben
lookup_voting_parties_label <- bind_rows(
  # Block 1: Staatsebene - Mutterparteien, Verbände & weitere Organisationen
  tibble(party_orig_value = grep("^p-",
                               names(voting_5y),
                               value = TRUE)) %>%
    mutate(level = "state") %>%
    separate(
      party_orig_value,
      into = c("prefix", "short_name", "add_info"),
      sep = "[-_]",
      remove = FALSE,
      extra = "merge",
      fill = "right"),
  # Block 2: Kantonsebene - Jungparteien, Frauensektionen, etc.
  tibble(party_orig_value = grep("^pdev-",
                               names(voting_5y),
                               value = TRUE)) %>%
    mutate(level = "canton_fraction") %>%
    separate(
      party_orig_value,
      into = c("prefix", "short_name", "add_info"),
      sep = "[-_]",
      remove = FALSE,
      extra = "merge",
      fill = "right")) %>%
  # Großschreibung der short_name-Spalte
  mutate(short_name = toupper(short_name),
         long_name = NA_character_,
         source = "Abstimmungen") %>% 
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source)
  



# Relevante Felder selektionieren
voting_5y %>%
  select(anr,
         datum,
         titel_kurz_d,
         titel_off_d,
         rechtsform, #1 Obligatorisches Referendum
                     #2 Fakultatives Referendum
                     #3 Volksinitiative
                     #4 Direkter Gegenentwurf zu einer Volksinitiative
                     #5 Stichfrage
         dep,
         `br-pos`,   #1 Befürwortend
                     #2 Ablehnend
                     #3 Keine
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
                     #9 Vorzug für die Volksinitiative (bei Stichfragen)
                     #. Missing
         legisjahr,
         `pa-iv`,
         `bv-pos`,   #1 Befürwortend
                     #2 Ablehnend
                     #3 Keine Abstimmungsempfehlung des Parlaments
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
         `nr-pos`,   #1 Befürwortende Mehrheit im Nationalrat
                     #2 Ablehnende Mehrheit im Nationalrat
                     #3 Keine Abstimmungsempfehlung des Nationalrats
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
         nrja,
         nrnein,
         `sr-pos`,   #1 Befürwortende Mehrheit im Ständerat
                     #2 Ablehnende Mehrheit im Ständerat
                     #3 Keine Abstimmungsempfehlung des Ständerats
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
         srja,
         srnein,
         # Parteiparolen
         starts_with("p-"),
                     #1 Ja-Parole
                     #2 Nein-Parole
                     #3 keine Parole abzugeben
                     #4 empfahl, einen leeren Stimmzettel einzulegen
                     #5 Stimmfreigabe
                     #8 Bevorzugung des Gegenentwurfs (bei Stichfrage)
                     #9 Bevorzugung der Volksinitiative (bei Stichfrage)
                     #66 Neutral: keine Parole oder Empfehlung auf leer einlegen                        #9999 Organisation existiert nicht
                     #. Unbekannt
         # Parteiparolen Kanton / Parteisektion
         starts_with("p-dev-"),
                     #1 Ja-Parole
                     #2 Nein-Parole
                     #3 keine Parole abzugeben
                     #4 empfahl, einen leeren Stimmzettel einzulegen
                     #5 Stimmfreigabe
                     #8 Bevorzugung des Gegenentwurfs (bei Stichfrage)
                     #9 Bevorzugung der Volksinitiative (bei Stichfrage)
                     # [leer] Parole gleich wie Mutterpartei (oder unbekannt)         
         volk,       #0 Eine Mehrheit der Abstimmenden hat die Vorlage abgelehnt
                     #1 Eine Mehrheit der Abstimmenden hat die Vorlage angenommen
                     #8 Bei Stichfragen:  Mehrheit für Gegenentwurfs
                     #9 Bei Stichfragen:  Mehrheit Volksinitiative
         stand,
                     #0 Die Vorlage hat keine Mehrheit der Standesstimmen er-reicht
                     #1 Die Vorlage hat die Mehrheit der Standesstimmen erreicht
                     #3 Ständemehr nicht notwendig
                     #8 Bei Stichfragen: Mehrheit für Gegenentwurf
                     #9 Bei Stichfragen: Mehrheit für Volksinitiative
         annahme,    #0 Ablehnung der Vorlage
                     #1 Annahme der Vorlage
                     #8 Bei Stichfragen: Gegenentwurf angenommen
                     #9 Bei Stichfragen: Volksinitiative angenommen
                     #. Bei Stichfragen: Ergebnis der Stichfrage obsolet
         berecht,
         stimmen,
         bet,
         leer,
         ungultig,
         gultig,
         volkja,
         volknein,
         `volkja-proz`)



```

## Wahlen

### Bundesebene

#### Nationalrat

```{r}
#| label: load_nationalrat


# Nationalrat: Daten einlesen
elec_nationalrat  <- read_excel("~/CAS/Zertifikatsarbeit/data/elections/Ratsmitglieder_1848_DE_BUND_NR.xlsx")

# Struktur prüfen
str(elec_nationalrat)

# Fehlende Werte (NA), Klassen und Levels prüfen
Abstract(elec_nationalrat)
PlotMiss(elec_nationalrat)    
    
# Duplikate mittels Funktion ermitteln
elec_nationalrat_duplicates <- find_and_remove_duplicates(elec_nationalrat)
    # elec_nationalrat_duplicates$unique
    # elec_nationalrat_duplicates$duplicates

# df mit unique Einträge weiterverwenden 
elec_nationalrat <- elec_nationalrat_duplicates$unique

# Auf relevante Spalten reduzieren und Datumsformat anpassen
    # Spaltenüberschriften konkateniert
    # cat(paste(paste0('"', colnames(elec_nationalrat), '"'),collapse = ",\n"))

elec_nationalrat_final <- elec_nationalrat %>% 
  select(# "Active",
         # "FirstName",
         # "LastName",
         # "GenderAsString",
         "CantonName",
         "CantonAbbreviation",
         # "CouncilName",
         # "ParlGroupName",
         # "ParlGroupAbbreviation",
         "PartyName",
         "PartyAbbreviation",
         # "MaritalStatusText",
         # "Nationality",
         # "BirthPlace_City",
         # "BirthPlace_Canton",
         # "Mandates",
         "DateJoining",
         "DateLeaving",
         # "Citizenship",
         # "DateOfBirth",
         "DateOfDeath") %>% 
  mutate(DateJoining = dmy(DateJoining),
         DateLeaving = dmy(DateLeaving),
         DateOfDeath = dmy(DateOfDeath))  

# Anzeige mit datatable()
datatable(elec_nationalrat_final,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))
```

#### Ständerat

```{r}
#| label: load_ständerat


# Ständerat: Daten einlesen
elec_ständerat  <- read_excel("~/CAS/Zertifikatsarbeit/data/elections/Ratsmitglieder_1848_DE_BUND_SR.xlsx")

# Struktur prüfen
str(elec_ständerat)

# Fehlende Werte (NA), Klassen und Levels prüfen
Abstract(elec_ständerat)
PlotMiss(elec_ständerat)    
    
# Duplikate mittels Funktion ermitteln
elec_ständerat_duplicates <- find_and_remove_duplicates(elec_ständerat)
    # elec_nationalrat_duplicates$unique
    # elec_nationalrat_duplicates$duplicates

# df mit unique Einträge weiterverwenden 
elec_ständerat <- elec_ständerat_duplicates$unique

  
# Auf relevante Spalten reduzieren und Datumsformat anpassen
    # Spaltenüberschriften konkateniert
    # cat(paste(paste0('"', colnames(elec_nationalrat), '"'),collapse = ",\n"))



elec_ständerat_final <- elec_ständerat %>% 
  select(# "Active",
         # "FirstName",
         # "LastName",
         # "GenderAsString",
         "CantonName",
         "CantonAbbreviation",
         # "CouncilName",
         # "ParlGroupName",
         # "ParlGroupAbbreviation",
         "PartyName",
         "PartyAbbreviation",
         # "MaritalStatusText",
         # "Nationality",
         # "BirthPlace_City",
         # "BirthPlace_Canton",
         # "Mandates",
         "DateJoining",
         "DateLeaving",
         # "Citizenship",
         # "DateOfBirth",
         "DateOfDeath") %>% 
  mutate(DateJoining = dmy(DateJoining),
         DateLeaving = dmy(DateLeaving),
         DateOfDeath = dmy(DateOfDeath))


# Anzeige mit datatable()
datatable(elec_ständerat_final,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))
```

#### National- & Ständerat kombinieren für weitere Bearbeitung

```{r}
#| label: combine_parliament


# National- und Ständeratlisten kombinieren
elec_nr_sr_combined <- bind_rows(
  elec_nationalrat_final %>% mutate(role = "Nationalrat"),
  elec_ständerat_final %>% mutate(role = "Ständerat")) %>%
  select(role, everything())


# Abstiummungsdatum (voting_5y_dates) als Spalten hinzufügen
elec_nr_sr_combined <- elec_nr_sr_combined %>%
  mutate(!!!setNames(rep(list(NA_integer_),
                         length(voting_5y_dates)),
                     voting_5y_dates))

# Ergänzen ob Ratsmitglied zum Zeitpunkt der Abstimmung aktiv war
elec_nr_sr_combined <- elec_nr_sr_combined %>%
  mutate(!!!setNames(
    lapply(voting_5y_dates,
           function(datum) {
             abstimmungsdatum <- as.Date(datum)
             with(., as.integer(                            # 1 der 0 zurück
               DateJoining <= abstimmungsdatum &
                 (is.na(DateLeaving) | DateLeaving >= abstimmungsdatum)))}
           ), voting_5y_dates))




# Kanton- und Parteibezeichnungen zwecks Lookup/Vereinheitlichung in df schreiben 
lookup_elec_nr_sr_combined_canton_label <- elec_nr_sr_combined %>% 
  select(CantonAbbreviation, CantonName) %>% 
  distinct()


lookup_elec_nr_sr_combined_parties_label  <- elec_nr_sr_combined %>%
  select(PartyAbbreviation, PartyName) %>%
  distinct() %>%
  rename(party_orig_value = PartyAbbreviation,
         long_name = PartyName) %>%
  mutate(prefix = NA_character_,
         add_info = NA,
         level = NA_character_,
         source = "National_und_Ständerat",
         short_name = party_orig_value %>%
           str_replace("-.*", "") %>%         # ab dem ersten "-" abschneiden
           str_replace("^M-E$", "Mitte") %>%  # "M-E" durch "Mitte" ersetzen
         toupper())%>% 
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source)
  




```

s

```{r}

# Sitze pro Kanton, Partei und Jahr/Abstimmung
#     
#     # long format
#       df_sum <- elec_nationalrat_final %>%
#         group_by(CantonAbbreviation, PartyAbbreviation) %>%
#         summarise(sum_value = sum(value, na.rm = TRUE),
#                   .groups = "drop")
#     
#     # wide format
#     # Pivotieren: Partei-Spalten erzeugen
#       df_wide <- df_sum %>%
#         pivot_wider(names_from = PartyAbbreviation,
#                     values_from = sum_value,
#                     values_fill = 0)
#     
#     
#     
#     # Partei-Spaltennamen extrahieren (ohne Kanton/Jahr)
#     partei_cols <- setdiff(names(df_wide),
#                            c("CantonAbbreviation"))
#     
#     # Spaltensummen der Parteien berechnen für Sortierung
#     partei_sums <- colSums(df_wide[partei_cols])
#     
#     # Zeilensumme der Kantone/Jahre hinzufügen
#     df_wide$Total <- rowSums(df_wide[partei_cols])
#     
#     
#     # Parteispalten-Anordnung nach Summe sortieren
#     sorted_partei <- names(sort(partei_sums,
#                                 decreasing = TRUE))
#     
#     
#     # Dataframe neu anordnen: Kanton/Jahr,  sortierte und gefilterte Parteien
#     elec_nationalrat_final <- df_wide[, c(setdiff(names(df_wide),
#                                                   partei_cols),
#                                           sorted_partei)] %>% 
#       arrange(desc(Total))
# 
#     
#         
# datatable(elec_nationalrat_final,
#           class = 'nowrap',
#           filter = 'top',
#           options = list(pageLength = 7,
#                          scrollX = TRUE,
#                          search = list(regex = TRUE,
#                                        caseInsensitive = TRUE)))



# write_xlsx(elec_nationalrat,
#            "elec_nationalrat_final.xlsx")
```

### Kantonsebene

#### Kantonale Parlamente (Legislative)

```{r}

# TODO Die Kantonalen Abstimmungen finden nicht in allen kantonen gleichzeitg statt. Deshalb genauer die Räte/Konstellation zum Zeitpunkt der jeweiligen Abstimmung zu prüfen.


# Struktur der "schön formatierten" Exceldatei lässt keinen "simplen" Import zu.
# Header ist in Zeile 2 und nicht vollständig
# Daten (für Kantone) starten in Zeile 4 aber enden auf Zeile 29 bevor es mit Kommentaren und Fussnoten weitergeht 


# Header aus Zeile 2 für Spaltennamen lesen
tmp_header <- read_excel("~/CAS/Zertifikatsarbeit/data/elections/je-d-17.02.05.01.03_KANTON_Kantonale_Parlamentswahlen.xlsx", 
                     sheet = 1, 
                     skip = 1,   # Header ist Zeile 2
                     n_max = 0) %>%
  names()

# Lücken im Header anpassen (i.e. erste beiden Spalten benennen)
tmp_header <- c("Kanton", "Leer", tmp_header)

tmp_name_map <- c("Kanton"        = "Kanton",
                  "Leer"          = "Leer",
                  "Wahljahr 5)"   = "Wahljahr",
                  "FDP 2)"        = "FDP",
                  "SP"            = "SP",
                  "SVP"           = "SVP",
                  "LPS 2)"        = "LPS",
                  "EVP"           = "EVP",
                  "CSP"           = "CSP",
                  "GLP"           = "GLP",
                  "Die Mitte 8)"  = "Mitte",
                  "CVP 3) 8)"     = "CVP",
                  "BDP 8)"        = "BDP",
                  "PdA"           = "PdA",
                  "PSA"           = "PSA",
                  "Grüne 9)"      = "Grüne",
                  "FGA"           = "FGA",
                  "Sol."          = "Sol.",
                  "EDU"           = "EDU",
                  "Lega"          = "Lega",
                  "MCG (MCR)"     = "MCR",
                  "Übrige 4)"     = "Übrige",
                  "Total"         = "Total")



# Automatisch ersetzen
tmp_header <- ifelse(tmp_header %in% names(tmp_name_map),
                     tmp_name_map[tmp_header],
                     tmp_header)

print(tmp_header)


# Daten ab Zeile 4 importieren
elec_kantonsparlament_raw <- read_excel("~/CAS/Zertifikatsarbeit/data/elections/je-d-17.02.05.01.03_KANTON_Kantonale_Parlamentswahlen.xlsx", 
                 sheet = 1, 
                 skip = 3,         # überspringt die ersten 3 Zeilen
                 col_names = tmp_header)

# Schritt 4: Nur Zeilen behalten, in denen "Wahljahr" nicht NA ist
elec_kantonsparlament <- elec_kantonsparlament_raw  %>%
  filter(!is.na(Wahljahr)) %>% 
  select(-Leer)

# Ergebnis anzeigen
print(elec_kantonsparlament)
```

#### Kantonale Regierung (Exekutive)

Die Kantonalen Abstimmungen finden nicht in allen kantonen gleichzeitg statt. Deshalb genauer die Räte/Konstellation zum Zeitpunkt der jeweiligen Abstimmung zu prüfen.

Die Struktur der "schön formatierten" Exceldatei lässt keinen "simplen" Import zu.

-   1 Excelsheet / Jahr

-   Header ist in Zeile 2 und nicht vollständig

-   Daten (für Kantone) starten in Zeile 4 aber enden auf Zeile 29 bevor es mit Kommentaren und Fussnoten weitergeht.

Dateipfad und gewünschte Sheets festlegen

```{r}
dateipfad <- "~/CAS/Zertifikatsarbeit/data/elections/je-d-17.02.06.01_KANTON_Kantonale_Regierungswahlen.xlsx"  

selected_sheets <- c("2024", "2023", "2022","2021","2020","2019")
```

Function

```{r}

import_election_data <- function(dateipfad, sheetname) {
  
  # Headerzeilen einlesen  
  header <- readxl::read_excel(dateipfad,
                               sheet = sheetname,
                               skip = 1,
                               n_max = 0) %>%
    names()
  
  # Header anpassen: Wahljahr vereinheitlichen und Kanton hinzufügen
  header[grepl("^Wahljahr", header)] <- "Wahljahr" 
  header <- c("Kanton", header)
        
  # Daten ab Zeile 4 importieren
  daten_raw <- read_excel(dateipfad,
                          sheet = sheetname,
                          skip = 3,
                          col_names = header)
  
  # Zeilen ohne "Wahljahr" ausschliessen
  wahljahr_col <- names(daten_raw)[grepl("^Wahljahr",
                                         names(daten_raw))][1]
  names(daten_raw)[names(daten_raw) == wahljahr_col] <- "Wahljahr"

  daten_wide <- daten_raw %>%
    filter(!is.na(suppressWarnings(as.numeric(.data[[wahljahr_col]]))))
  
  # Zu pivotierenden Spalten in numeric umwandeln
  cols_pivot <- setdiff(names(daten_wide), c("Kanton", wahljahr_col))
  daten_wide <- daten_wide %>%
    mutate(across(all_of(cols_pivot), as.numeric))
  
  # 6. Pivotieren
  daten_long <- daten_wide %>%
    pivot_longer(
      cols = all_of(cols_pivot),
      names_to = "Partei",
      values_to = "Wert")
  
  return(daten_long)
}
```

Function ausführen: Import und Konsolidation

```{r}

# Objekt erstellen, mit Sheets als tibble/dataframe
daten_liste <- setNames(lapply(selected_sheets,
                               function(sheet) import_election_data (dateipfad,
                                                                     sheet)),
                        selected_sheets)

str(daten_liste)
lapply(daten_liste, summary)

# Alle tibbles zu einem Dataframe zusammenfügen
elec_kantonale_regierung_combined <- bind_rows(daten_liste,
                                               .id = "Sheet")



# Parteinamenvarianten
unique(elec_kantonale_regierung_combined$Partei)

# Parteien zwecks Lookup/Vereinheitlichung in df schreiben
lookup_kantonale_regierung_parties_label <- elec_kantonale_regierung_combined %>%
  rename(party_orig_value = Partei) %>%
  mutate(level = NA_character_,
         long_name = NA_character_,
         source = "Kantonale_Regierung",
         
         add_info = str_extract(party_orig_value,
                                "\\d+(?=\\)?$)"),  # Zahl am Ende/vor Klammer-Ende
         short_name = str_remove(party_orig_value,
                                 "\\s*\\d+\\)?$"), # - Leerzeichen/Zahl/Klammer
         prefix = NA_character_) %>%
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source) %>%
  # Großschreibung der short_name-Spalte
  mutate(short_name = toupper(short_name))


# Output prüfen (unique/distinct)
lookup_kantonale_regierung_parties_label %>% distinct() %>% print(n = Inf)


datatable(elec_kantonale_regierung_combined,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))
```

### Gemeindeebene

#### Exekutiven der statistischen Städte

-   1 Excelsheet / Jahr

-   Header zweizeilig mit Start in Zeile –\> 3 `skip = 2, n_max = 2,`

-   Teils verbundene Header-Zeilen (vertikal/horizontal)

-   Cluster Einwohnerzahlen unterteilt Daten

-   Parteinamen uneinheitlich aufgrund von Fussnoten

--\> Datenformat "wide" zuerst bereinigen und ins "long" Format bringen

Dateipfad und gewünschte Sheets festlegen

```{r}

dateipfad <- "~/CAS/Zertifikatsarbeit/data/elections/je-d-17.02.07.01_GEMEINDE_Die Exekutiven der statistischen Städte.xlsx"

selected_sheets <- c("2024", "2023", "2022","2021","2020","2019") 
```

Function für den Import der Gemeindedaten

```{r}

importiere_sheet <- function(dateipfad, sheetname) {

      ###################################################################
      ########## DATEN IMPORTIEREN ######################################
      ########## Header definieren ######################################
      ###################################################################
      
      
      # Headerzeilen einlesen
      header <- suppressMessages(read_excel(dateipfad,
                   sheet = sheetname,
                   skip = 2,
                   n_max = 2,
                   col_names = FALSE))
      
      # Daten  einlesen
      daten_raw <- suppressMessages(read_excel(dateipfad,
                              sheet = sheetname,
                              skip = 5,
                              col_names = FALSE))
      
      
      # Die Spaltennamen zusammensetzen
      # Leere Zellen in 1. Headerzeile mit Werten von rechts auffüllen wenn leer/NA
      header_filled <- as.data.frame(t(header))   # t() "matrix transpose"
      header_filled <- fill(header_filled,        
                            V1,                   # Header Spalte 1 (V1) auffüllen
                            .direction = "down")  # Werte nach unten übernehmen
      header_filled <- t(header_filled)           # t() nochmals (zurück)
      
      # Spaltennamen kombinieren
      spaltennamen <- paste(header_filled[1, ],
                            header_filled[2, ],
                            sep = "_")
      spaltennamen <- gsub("_NA|NA_","", spaltennamen) # Entfernt überflüssige NAs
      
      # Spaltennamen zuweisen
      colnames(daten_raw) <- spaltennamen
      
      
      ###################################################################
      ########## TRANSPONIEREN ##########################################
      ########## Gemeindegrössen Cluster ################################
      ###################################################################
      
      
      # Cluster Einwohnerzahl als Spalte verwenden
      daten_wide <- daten_raw %>%
        mutate(Gemeindegrösse_Cluster =             # Name der neuen Spalte
                 ifelse(
                   is.na(                           # 4) auf NA prüfen
                     suppressWarnings(        # 3) Warnung aus (z.B. "≥ ..Einw..")
                     as.numeric(                    # 2) Wert als Zahl 
                     gsub("'", "", `Kantons-Nr.`)   # 1) Tausender Zeichen (')                                                              entfernen
                   ))),
                   as.character(`Kantons-Nr.`),     # 5) Wert von "Kantons-Nr" 
                   NA_character_                    #    sonst NA   
                 ))  %>%
        fill(Gemeindegrösse_Cluster,
             .direction = "down") %>%              # Cluster nach unten auffüllen
        filter(!is.na(suppressWarnings(
          as.numeric(gsub("'", "", `Kantons-Nr.`))))) # Herausfiltern von Zeilen                                                           mit NICHT-numerischem Wert
    
    
    # Ansicht (Snapshot) nach transponieren
    daten_wide[1:10,                    # 10 Zeilen
               c(1:10,                  # 10 Spalten +
                 ncol(daten_wide))]     # Letzte Spalte
                                        # ncol() von df daten_wide --> Anz. Spalten
                                        # Anzahl Spalten = Position letzte Spalte
    
    
    
    ###################################################################
    ########## TRANSPONIEREN ##########################################
    ########## Frauen, Männer, Total & Parteien ## ####################
    ###################################################################
    
    
    
    daten_long <- daten_wide %>%
      mutate(across(matches("(_Frauen|_Männer|_Total)$"),
                    ~ suppressWarnings(as.numeric(.)))) %>%     # Werte numerisch
      pivot_longer(cols = matches("(_Frauen|_Männer|_Total)$"), # Spaltenauswahl
                   names_to = c("Partei", "m_w_Total"),         # Neue Label-Spalte
                   names_pattern = "^(.*)_(Frauen|Männer|Total)$",  # RegEx
                   values_to = "Wert")                          # Neue Wert-Spalte
    
    return(daten_long)

}
```

Function ausführen: Import der Dateien testen

```{r}

for (sheet in selected_sheets) {
  cat("\n-----------------------------\n")
  cat("Versuche Sheet:", sheet, "\n")
  result <- tryCatch({
    dat <- importiere_sheet(dateipfad, sheet)
    cat("Sheet erfolgreich eingelesen:", sheet, "\n")
    # Zusammenfassung:
    cat("Anzahl Zeilen:", nrow(dat), "\n")
    cat("Anzahl Spalten:", ncol(dat), "\n")
    cat("Spaltennamen (erste 15):", paste(names(dat)[1:min(15, ncol(dat))], collapse = ", "), "\n")
    TRUE
  }, error = function(e) {
    cat("Fehler beim Einlesen von Sheet:", sheet, "\n")
    cat("Fehlermeldung:", e$message, "\n")
    FALSE
  })
}
```

Function ausführen: Import und Konsolidation

```{r}

# Objekt erstellen, mit Sheets als tibble/dataframe
daten_liste <- setNames(lapply(selected_sheets,
                               function(sheet) importiere_sheet(dateipfad, sheet)),
                        selected_sheets)

str(daten_liste)
lapply(daten_liste, summary)

# Alle tibbles zu einem Dataframe zusammenfügen
elec_gemeinde_exekutiven_combined <- bind_rows(daten_liste,
                                            .id = "Sheet") %>% 
  select(-c('Grössenklasse-Nr.', Grössenklasse))



datatable(elec_gemeinde_exekutiven_combined,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))


# Parteinamenvarianten
unique(elec_gemeinde_exekutiven_combined$Partei)

# Parteien zwecks Lookup/Vereinheitlichung in df schreiben
lookup_gemeinde_exekutiven_parties_label <- elec_gemeinde_exekutiven_combined %>%
  rename(party_orig_value = Partei) %>%
  mutate(add_info = str_extract(party_orig_value,
                                "\\d+(?=\\)?$)"),  # Zahl am Ende/vor Klammer-Ende
         short_name = str_remove(party_orig_value,
                                 "\\s*\\d+\\)?$"), # - Leerzeichen/Zahl/Klammer
         long_name = NA_character_, 
         prefix = NA_character_,
         level = NA_character_,
         source = "Gemeinde_Exekutiven") %>% 
  # Großschreibung der short_name-Spalte
  mutate(short_name = toupper(short_name))%>% 
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source)
  



# Output prüfen (unique/distinct)
lookup_gemeinde_exekutiven_parties_label %>% distinct() %>% print(n = Inf)




# TODO:
# Parteinamen bereinigen!
# finales file: elec_gemeinde_exekutiven_final


# Dataframe als Excel schreiben
# write_xlsx(elec_gemeinde_exekutiven_final,
#            "elec_gemeinde_exekutiven_final.xlsx")
```

## Parteilandschaft

```{r}

#| label: load_parties_rating

parties_rating <- read_excel("~/CAS/Zertifikatsarbeit/data/parties_economic_socio-political_rating.xlsx",
                             sheet = "matrix_eco-socio_enhanced")
```

## Lookup tables

### Kantone

```{r}

lookup_elec_nr_sr_combined_canton_label



```

### Parteinamen

Die verschiedenen Quellen verwenden teils unteschiedliche Parteibezeichnungen. Zur Vereinheitlichung wird deshalb initial eine Lookup Tabelle gebildet.

```{r}
#| label: load_parties

# National- und Ständerat
print(lookup_elec_nr_sr_combined_parties_label %>%
        distinct(),
      n = 3)

# Kantonale Regierung
print(lookup_kantonale_regierung_parties_label %>%
        distinct(),
      n = 3)


# Gemeinde Exekutiven
print(lookup_gemeinde_exekutiven_parties_label %>%
        distinct(),
      n = 3)

# Abstimmungen
print(lookup_voting_parties_label %>%
        distinct(),
      n = 3)






# Dataframe bilden aus zwei Vektoren
parteinamen <- data.frame(
  kuerzel = c("fdp", "sps", "svp", "mitte", "evp", "gps", "glp", "ucsp", "pda", "sd", "edu", "fps", "lega", "kvp", "mcg", "cvp", "bdp", "lps", "ldu", "poch", "rep", "eco", "sgv", "sbv", "sgb", "travs", "sav", "vsa", "vpod", "voev", "tcs", "vcs", "acs", "sbk", "ssv", "gem", "kdk", "kkjpd", "gdk", "ldk"),
  
  name = c("Freisinnig-demokratische Partei (FDP.Die Liberalen)", "Sozialdemokratische Partei", "Schweizerische Volkspartei (bis 1936 Parolen der BGB Bern)", "Die Mitte", "Evangelische Volkspartei", "Grüne Partei der Schweiz", "Grünliberale Partei", "Christlichsoziale Partei der Schweiz (von der CVP unabhängige CSP)", "Partei der Arbeit", "Schweizer Demokraten", "Eidgenössisch-Demokratische Union", "Autopartei", "Lega dei Ticinesi", "Katholische Volkspartei", "Mouvement Citoyens Genevois", "Christlichdemokratische Volkspartei", "Bürgerlich-Demokratische Partei", "Liberale Partei der Schweiz", "Landesring der Unabhängigen", "Progressive Organisationen der Schweiz", "Schweizerische Republikanische Bewegung", "Economiesuisse (bis 15.9.2000: Schweizerischer Handels- und Industrieverein SHIV (Vorort))", "Schweizerischer Gewerbeverband", "Schweizer Bauernverband", "Schweizerischer Gewerkschaftsbund", "Travail.Suisse (bis 2002: Parolen des Christlichnationalen Gewerkschaftsbunds (CNG); dieser fusionierte per 1.1.2003 mit der VSA zu Travail.Suisse)", "Schweizerischer Arbeitgeberverband (bis 1996: Zentralverband Schweizerischer Arbeitgeber-Organisationen ZSAO)", "Vereinigung schweizerischer Angestelltenverbände", "Verband des Personals öffentlicher Dienste", "Verband öffentlicher Verkehr", "Touring Club Schweiz", "Verkehrs-Club der Schweiz", "Automobil Club der Schweiz", "Schweizer Bischofskonferenz", "Schweizerischer Städteverband", "Schweizerischer Gemeindeverband", "Konferenz der Kantonsregierungen", "Konferenz der kantonalen Justiz- und Polizeidirektoren", "Schweizerische Gesundheitsdirektorenkonferenz", "Konferenz der kantonalen Landwirtschaftsdirektoren"),
  stringsAsFactors = FALSE)


# Parteikürzel in Grossbuchstaben 
parteinamen$kuerzel <-  toupper(parteinamen$kuerzel)


# Neue Spalte mit "p-" Präfix für späteren Lookup der Parteiparolen
parteinamen$kuerzel_vote_parole <- paste0("p-", parteinamen$kuerzel) 


# Spaltenreihenfolge anpassen: p_kuerzel, kuerzel, name
parteinamen <- parteinamen[, c("kuerzel_vote_parole",
                               "kuerzel",
                               "name")]

# Anzeige mit datatable()
datatable(parteinamen,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))
```

# Transformation & visualization

## Abstimmungen

```{r}


```

```{r}


```

## Wahlen

### Bundesebene

#### Nationalrat

```{r}


########################################################################
####################### BACKUP 04.06.2025 ##############################
########################################################################


# Anzeige mit datatable()
datatable(elec_nationalrat,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))

# Fehlende Werte (NA), Klassen und Levels prüfen
Abstract(elec_nationalrat)
PlotMiss(elec_nationalrat)

# Datensatz reduzieren auf Aktive und doppelte Einträge elimnieren
elec_nationalrat_reduced <- elec_nationalrat %>%
  filter(Active == TRUE) %>% 
  distinct(.keep_all = TRUE) %>% 
  select(CantonAbbreviation,
         CantonName,
         PartyAbbreviation,
         PartyName) %>% 
  mutate(value = 1)

datatable(elec_nationalrat_reduced,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))

# Sitze pro Kanton, Partei und Jahr 
    
    # long format
      df_sum <- elec_nationalrat_reduced %>%
      group_by(CantonAbbreviation, PartyAbbreviation) %>%
      summarise(sum_value = sum(value, na.rm = TRUE),
                .groups = "drop")
    
    # wide format
    # Pivotieren: Partei-Spalten erzeugen
    df_wide <- df_sum %>%
      pivot_wider(names_from = PartyAbbreviation,
                  values_from = sum_value,
                  values_fill = 0)
    
    
    
    # Partei-Spaltennamen extrahieren (ohne Kanton/Jahr)
    partei_cols <- setdiff(names(df_wide),
                           c("CantonAbbreviation"))
    
    # Spaltensummen der Parteien berechnen für Sortierung
    partei_sums <- colSums(df_wide[partei_cols])
    
    # Zeilensumme der Kantone/Jahre hinzufügen
    df_wide$Total <- rowSums(df_wide[partei_cols])
    
    
    # Parteispalten-Anordnung nach Summe sortieren
    sorted_partei <- names(sort(partei_sums,
                                decreasing = TRUE))
    
    
    # Dataframe neu anordnen: Kanton/Jahr,  sortierte und gefilterte Parteien
    elec_nationalrat_final <- df_wide[, c(setdiff(names(df_wide),
                                                  partei_cols),
                                          sorted_partei)] %>% 
      arrange(desc(Total))
    
datatable(elec_nationalrat_final,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))
```

#### Ständerat

```{r}


########################################################################
####################### BACKUP 04.06.2025 ##############################
########################################################################



#TODO Es kann innerhalb der Legislatur Wechsel geben --> Anstelle der heute "Aktiven" ist es deshalb genauer die Räte/Konstellation zum Zeitpunkt der jeweiligen Abstimmung zu prüfen.


# Anzeige mit datatable()
datatable(elec_ständerat,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))


# Fehlende Werte (NA), Klassen und Levels prüfen
Abstract(elec_ständerat)
PlotMiss(elec_ständerat)

# Datensatz reduzieren auf Aktive und doppelte Einträge elimnieren
elec_ständerat_reduced <- elec_ständerat %>%
  filter(Active == TRUE) %>% 
  distinct(.keep_all = TRUE) %>% 
  select(CantonAbbreviation,
         CantonName,
         PartyAbbreviation,
         PartyName) %>% 
  mutate(value = 1)

datatable(elec_ständerat_reduced,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))

# Sitze pro Kanton, Partei und Jahr 
    
    # long format
      df_sum <- elec_ständerat_reduced %>%
      group_by(CantonAbbreviation, PartyAbbreviation) %>%
      summarise(sum_value = sum(value, na.rm = TRUE),
                .groups = "drop")
    
    # wide format
    # Pivotieren: Partei-Spalten erzeugen
    df_wide <- df_sum %>%
      pivot_wider(names_from = PartyAbbreviation,
                  values_from = sum_value,
                  values_fill = 0)
    
    
    # Partei-Spaltennamen extrahieren (ohne Kanton/Jahr)
    partei_cols <- setdiff(names(df_wide),
                           c("CantonAbbreviation"))
    
    # Spaltensummen der Parteien berechnen für Sortierung
    partei_sums <- colSums(df_wide[partei_cols])
    
    # Zeilensumme der Kantone/Jahre hinzufügen
    df_wide$Total <- rowSums(df_wide[partei_cols])
    
    
    # Parteispalten-Anordnung nach Summe sortieren
    sorted_partei <- names(sort(partei_sums,
                                decreasing = TRUE))
    
    
    # Dataframe neu anordnen: Kanton/Jahr,  sortierte und gefilterte Parteien
    elec_ständerat_final <- df_wide[, c(setdiff(names(df_wide),
                                                  partei_cols),
                                        sorted_partei)] %>% 
      arrange(desc(Total))
    
datatable(elec_ständerat_final,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))
```

### Kantonsebene

#### Kantonsregierung

```{r}


########################################################################
####################### BACKUP 03.06.2025 ##############################
########################################################################

# 
# datatable(elec_kantonale_regierung_final,
#          class = 'nowrap',
#           filter = 'top',
#           options = list(pageLength = 7,
#                          scrollX = TRUE,
#                          search = list(regex = TRUE,
#                                        caseInsensitive = TRUE)))
# 
# # Änderungen verfolgen
# # Partei-Spalten bestimmen
# parteien <- setdiff(names(elec_kantonsregierung_final), c("Kanton", "Wahljahr", "Total"))
# 
# # Dataframe nach Kanton und Wahljahr sortieren und ins lange Format bringen
# df_long <- elec_kantonsregierung_final %>%
#   arrange(Kanton, Wahljahr) %>%
#   pivot_longer(
#     cols = all_of(parteien),
#     names_to = "Partei",
#     values_to = "Wert_neu"
#   ) %>%
#   group_by(Kanton, Partei) %>%
#   arrange(Wahljahr, .by_group = TRUE) %>%
#   mutate(Wert_alt = lag(Wert_neu)) %>%
#   ungroup()
# 
# # Änderungen filtern: Zeige nur, wo sich der Wert geändert hat (und nicht NA)
# elec_kantonsregierung_changelog <- df_long %>%
#   filter(!is.na(Wert_alt),
#          Wert_neu != Wert_alt) %>%
#   select(Kanton,
#          Wahljahr,
#          Partei,
#          Wert_alt,
#          Wert_neu)
# 
# 
# datatable(elec_kantonsregierung_changelog,
#           class = 'nowrap',
#           filter = 'top',
#           options = list(pageLength = 7,
#                          scrollX = TRUE,
#                          search = list(regex = TRUE,
#                                        caseInsensitive = TRUE)))

```

## Parteilandschaft

### Multi-Dimensions-Model

#### Minimalwerte

Für jede Partei den Minimalwert des Abstimmungsverhaltens zu verwenden, basiert auf der Zielsetzung, die klarste politische Position einer Partei in einem bestimmten Themenbereich zu identifizieren. Diese Methodik stellt sicher, dass auch bei wenigen Abweichungen von der Mehrheitslinie die tatsächliche Haltung der Partei deutlich erkennbar bleibt.

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_min_x,
           y = socio_pct_min_y,
           label = Partei)) +
  geom_point(size = 3) +
  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(0, 100)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Grundlage: Minimalwerte des Abstimmungsverhaltens") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 105),
                  xlim = c(0, 105),
                  clip = "off")

```

#### Durchschnittswerte als Zentrum und Min/Max als Ellipse

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_avg_x,
           y = socio_pct_avg_y,
           label = Partei)) +
  geom_ellipse(
    aes(x0 = eco_pct_avg_x,
        y0 = socio_pct_avg_y,
        a = (eco_pct_max_x - eco_pct_min_x) / 2, # Halbachse x
        b = (socio_pct_max_y - socio_pct_min_y) / 2, # Halbachse y
        angle = 0),
    fill = "gray80", alpha = 0.4) +
  geom_point(size = 3) +
  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(-10, +110)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Grundlage: Durchschnitt des Abstimmungsverhaltens als Zentrum, Min-/Max als Ellipse") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 100),
                  xlim = c(0, 100),
                  clip = "off")
```

#### Hauptparteien: Durchschnittswerte als Zentrum und Min/Max als Ellipse / Klein- und Regionalparteien nur mit ihrem Durchschnittswert

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_avg_x,
           y = socio_pct_avg_y,
           label = Partei)) +
  geom_ellipse(aes(x0 = eco_pct_avg_x,
                   y0 = socio_pct_avg_y,
                   a = (eco_pct_max_x - eco_pct_min_x) / 2, # Halbachse x
                   b = (socio_pct_max_y - socio_pct_min_y) / 2, # Halbachse y
                   angle = 0),
               fill = "gray80", alpha = 0.4) +
  geom_point(size = 3) +
  
  # Kleinere Parteien
  geom_point(data = subset(parties_rating,
                           `Grosse Partei` == "n" &
                             Relevanz_nationale_Abstimmungen != "-"),
             aes(x = eco_x,
                 y = socio_y),
             shape = 21, fill = "grey", color = "black", size = 1, stroke = 1) +
  
  # Labels der kleineren Partein
  geom_text(data = subset(parties_rating,
                          `Grosse Partei` == "n" &
                            Relevanz_nationale_Abstimmungen != "-"),
            aes(x = eco_x,
                y = socio_y,
                label = Partei),
            vjust = -1, fontface = "plain", color = "darkgrey") +
  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(-10, +110)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Durchschnitt des Abstimmungsverhaltens als Zentrum, Min-/Max als Ellipse") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 100),
                  xlim = c(0, 100),
                  clip = "off")
```

#### Hauptparteien: Durchschnittswerte als Zentrum und Min/Max als Ellipse / Verbände sowie Klein- und Regionalparteien nur mit ihrem Durchschnittswert

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_avg_x,
           y = socio_pct_avg_y,
           label = Partei)) +
  geom_ellipse(
    aes(x0 = eco_pct_avg_x,
        y0 = socio_pct_avg_y,
        a = (eco_pct_max_x - eco_pct_min_x) / 2, # Halbachse x
        b = (socio_pct_max_y - socio_pct_min_y) / 2, # Halbachse y
        angle = 0),
    fill = "gray80", alpha = 0.4) +
  geom_point(size = 3) +
  
  # Kleinere Parteien
  geom_point(data = subset(parties_rating,
                           `Grosse Partei` == "n" #&
                           #Relevanz_nationale_Abstimmungen != "-"
                           )
                  ,
    aes(x = eco_x, y = socio_y),
    shape = 21, fill = "grey", color = "black", size = 1, stroke = 1
  ) +
  # Labels der kleineren Partein
  geom_text(data = subset(parties_rating,
                          `Grosse Partei` == "n" #&
                          #Relevanz_nationale_Abstimmungen != "-"
                  )
                  ,
    aes(x = eco_x, y = socio_y, label = Partei),
    vjust = -1, fontface = "plain", color = "darkgrey"
  ) +

  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(-10, +110)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Grundlage: Durchschnitt des Abstimmungsverhaltens als Zentrum, Min-/Max als Ellipse") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 100),
                  xlim = c(0, 100),
                  clip = "off")
```

### 3D-Koordinatensystem (Testweise)

```{r}
#install.packages("plotly")

library(plotly)

# Datenframe erstellen
parties <- data.frame(
  Partei = c("SP", "SVP", "FDP", "GPS", "GLP", "Mitte", "EVP", "EDU"),
  Wirtschaft = c(20, 85, 80, 30, 60, 60, 40, 90),      # Links = niedrig, Rechts = hoch
  Gesellschaft = c(90, 20, 55, 90, 75, 45, 50, 20),    # Libertär = hoch, Autoritär = niedrig
  Kosmopolitismus = c(90, 15, 60, 95, 85, 50, 55, 20)  # Kosmopolitisch = hoch, Nationalistisch = niedrig
)

# Interaktives 3D-Scatterplot mit Plotly
fig <- plot_ly(
  data = parties,
  x = ~Wirtschaft,
  y = ~Gesellschaft,
  z = ~Kosmopolitismus,
  text = ~Partei,
  type = 'scatter3d',
  mode = 'markers+text',
  marker = list(size = 5),
  textposition = 'top center'
)

# Achsen benennen und Layout anpassen
fig <- fig %>% layout(
  scene = list(
    xaxis = list(title = "Wirtschaftspolitik (links – rechts)"),
    yaxis = list(title = "Gesellschaftspolitik (autoritär – libertär)"),
    zaxis = list(title = "Kosmopolitismus – Nationalismus")
  ),
  title = "Schweizer Parteien im 3D-Koordinatensystem nach Kitschelt"
)

# Plot anzeigen
fig


```
