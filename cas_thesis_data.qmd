---
title: "CAS thesis data"
author: "DaaniiH"
date: 2025-06-01

execute:
  warning: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: true
    code-summary: "Code anzeigen" # Optional, Text für den Aufklapp-Link
    code-tools: true              # Optional, Toolbar für Code-Chunks
    number-sections: true
    max-width: none
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
theme: bootstrap
---

# Libraries

```{r}
#| label: load_libraries


library(readr)
library(readxl)
library(pxmake)   # to load PX files
library(pxR)      # to load PX files
library(jsonlite) # to load JSON files

library(purrr)

library(writexl)  # Write Excel files

library(dplyr)
library(tidyverse)
library(ggplot2)  # Diagrams
library(ggforce)  # Diagrams
library(DT)       # datatable()

library(DescTools)
```

# Functions

```{r}
#| label: load_functions


### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###  
# Duplikate in df finden & als $unique oder $duplicates selektionierbar machen
find_and_remove_duplicates <- function(df) {
  list(
    unique = df[!duplicated(df), ],
    duplicates = df[duplicated(df) | duplicated(df, fromLast = TRUE), ]
  )
}



### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###  
# Aktive National- & Ständeräte identifizieren und selektionierbar machen

filter_active <- function(data, von, bis) {
  von <- as.Date(von)
  bis <- as.Date(bis)
  data %>%
    filter(
      DateJoining <= bis,                      # Eintritt vor/am Ende d. Zeitraums
      is.na(DateLeaving) | DateLeaving >= von  # Kein Austritt/nach Beginn des Z..
    )
}




### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###  
# 




```

# **ETL: Extract, Transform, Load**

-   Daten werden aus verschiedenen Excel-Dateien ausgelesen, unabhängig davon, wie komplex oder verschachtelt sie sind (z. B. mehrere Sheets, verbundene Zellen, unterteilte Datenblöcke).

-   Bei Excel-Dateien mit mehreren Sheets werden Functions angewendet.

-   Header werden identifiziert und ggf. aus mehreren Zeilen zusammengesetzt.

-   Daten werden bereinigt, normalisiert und in das gewünschte Zielformat gebracht (z. B. Wide zu Long, Entfernen von Leerzeilen, Auflösen von verbundenen Zellen, Vereinheitlichung der Spaltenstruktur).

-   Die transformierten Daten werden für die weitere Analyse und Visualisation zu Verfügung gestellt.

## Lookup Tabellen

```{r}

# Dataframe bilden für Lookup der Kantonsnamen/-Kürzel
lookup_kantone <- data.frame(Kanton = c("Aargau", "Appenzell A. Rh.",
                                        "Appenzell I. Rh.", "Basel-Landschaft",
                                        "Basel-Stadt", "Bern", "Freiburg", "Genf",
                                        "Glarus", "Graubünden", "Jura", "Luzern",
                                        "Neuenburg", "Nidwalden", "Obwalden",
                                        "Schaffhausen", "Schwyz", "Solothurn",
                                        "St. Gallen", "Tessin", "Thurgau", "Uri",
                                        "Waadt", "Wallis", "Zug", "Zürich"),
                             Kt = c("AG", "AR", "AI", "BL", "BS","BE", "FR", "GE",
                                    "GL", "GR", "JU", "LU", "NE","NW", "OW", "SH",
                                    "SZ", "SO", "SG","TI", "TG", "UR", "VD", "VS",
                                    "ZG", "ZH"),
                             stringsAsFactors = FALSE)


```

## Abstimmungen

```{r}
#| label: load_voting


# Manuell migrierte Lookup Tabellen aus dem PDF-Codebook (swissvotes.ch) laden
# Parteien
lookups_codebook_parties <- read_excel("data/lookups_codebook.xlsx",
                                       sheet = "parties")
# Parteiparolen
lookups_codebook_paroles <- read_excel("data/lookups_codebook.xlsx",
                                       sheet = "paroles")


### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### 


# Ergbenisse der Schweizweite Abstimmungen laden
voting_raw <- read_delim("data/abstimmungen_swissvotes_DATASET CSV 09-02-2025.csv",
                     delim = ";",
                     escape_double = FALSE,
                     trim_ws = TRUE,
                     show_col_types = FALSE)

# Datum formatieren
voting_raw <- voting_raw %>% 
  mutate(datum = dmy(datum))

# Einträge vor 2020 löschen
voting_5y <- voting_raw %>%
  filter(datum >= as.Date("2020-01-01"))

# Abstimmungsdaten der letzten 5 Jahre in Vektor schreiben für spätere Selektion
voting_5y_dates <- voting_5y %>%
  select(datum) %>%
  distinct() %>%
  pull(datum) %>%
  as.character()

# Abstimmungen ab 2020 in datatable() anzeigen
datatable(voting_5y,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))

### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### 


# Parteien aus Parolen (p- & pdev-..-..) zwecks Lookup/Vereinheitlichung in df schreiben
lookup_voting_parties_label <- bind_rows(
  # Block 1: Staatsebene - Mutterparteien, Verbände & weitere Organisationen
  tibble(party_orig_value = grep("^p-",
                               names(voting_5y),
                               value = TRUE)) %>%
    mutate(level = "state") %>%
    separate(
      party_orig_value,
      into = c("prefix", "short_name", "add_info"),
      sep = "[-_]",
      remove = FALSE,
      extra = "merge",
      fill = "right"),
  # Block 2: Kantonsebene - Jungparteien, Frauensektionen, etc.
  tibble(party_orig_value = grep("^pdev-",
                               names(voting_5y),
                               value = TRUE)) %>%
    mutate(level = "canton_fraction") %>%
    separate(
      party_orig_value,
      into = c("prefix", "short_name", "add_info"),
      sep = "[-_]",
      remove = FALSE,
      extra = "merge",
      fill = "right")) %>%
  # Großschreibung der short_name-Spalte
  mutate(short_name = toupper(short_name),
         long_name = NA_character_,
         source = "Abstimmungen") %>% 
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source)
```

## Wahlen

### Bundesebene

#### Nationalrat

```{r}
#| label: load_nationalrat

# Header laden
header <- as.character(read_excel("data/je-d-17.02.02.02.01.01_BUND_NATIONALRAT.xlsx",
                                  skip = 0,
                                  n_max = 1)[1, ])

# Spaltennamen "Partei 1" zu "Partei" umbenennen
header[header == "Partei 1"] <- "Partei"

# Daten ab Zeile 4 (+25) mit diesem Header einlesen
elec_nationalrat <- read_excel("data/je-d-17.02.02.02.01.01_BUND_NATIONALRAT.xlsx",
                               skip = 3,
                               n_max = 25,
                               col_names = header)

# Refernzen zu Fussnoten aus Parteispalte löschen
elec_nationalrat$Partei <- sub("\\s*\\d+$",
                                   "",
                                   elec_nationalrat$Partei)
```

#### Ständerat

```{r}
#| label: load_ständerat

# Header laden
header <- as.character(read_excel("data/je-d-17.02.03.01_BUND_STÄNDERAT.xlsx",
                                  skip = 0,
                                  n_max = 1)[1, ])

# Daten ab Zeile 5 (+14) mit diesem Header einlesen
elec_ständerat <- read_excel("data/je-d-17.02.03.01_BUND_STÄNDERAT.xlsx",
                              skip = 4,
                              n_max = 14,
                              col_names = header)

# Refernzen zu Fussnoten aus Parteispalte löschen
elec_ständerat$Partei <- sub("\\s*\\d+$",
                                   "",
                                   elec_ständerat$Partei)

```

#### Nationalrat - & Ständerat: Stichtagansatz. Unbrauchbar, Datenqualität ungenügend

```{r}
#| label: load_nationalrat_old
#| eval: false
#| include: false
# 
# #################################################################################
# ## Der Datenexport von parlament.ch ist unvollständig. Es müssten per beliebigem ## Stichtag immer 200 National- und 46 Ständeräte sein, was nicht zutrifft. 
# ## Auserdem befinden sich Duplikate in den Daten.
# ## Es wird deshalb von einer Tagesgenauen Betrachtung abgesehen und stattdessen ## nur die Wahlergebnisse von 2019 und 2023 berücksichtigt.
# ## Zumindest solange, bis Daten korrekt publiziert sind.
# #################################################################################
# 
# # Nationalrat: Daten einlesen
# elec_nationalrat  <- read_excel("data/Ratsmitglieder_1848_DE_BUND_NR.xlsx")
# 
# # Struktur prüfen
# str(elec_nationalrat)
# 
# # Fehlende Werte (NA), Klassen und Levels prüfen
# Abstract(elec_nationalrat)
# PlotMiss(elec_nationalrat)    
#     
# # Duplikate mittels Funktion ermitteln
# elec_nationalrat_duplicates_check <- find_and_remove_duplicates(elec_nationalrat)
#     # elec_nationalrat_duplicates$unique
#     # elec_nationalrat_duplicates$duplicates
# 
# # df mit unique Einträge weiterverwenden 
# elec_nationalrat <- elec_nationalrat_duplicates_check$unique
# 
# # Auf relevante Spalten reduzieren und Datumsformat anpassen
#     # Spaltenüberschriften konkateniert
#     # cat(paste(paste0('"', colnames(elec_nationalrat), '"'),collapse = ",\n"))
# 
# onalrat_final <- elec_nationalrat %>% 
#   select(# "Active",
#          # "FirstName",
#          # "LastName",
#          # "GenderAsString",
#          "CantonName",
#          "CantonAbbreviation",
#          # "CouncilName",
#          # "ParlGroupName",
#          # "ParlGroupAbbreviation",
#          "PartyName",
#          "PartyAbbreviation",
#          # "MaritalStatusText",
#          # "Nationality",
#          # "BirthPlace_City",
#          # "BirthPlace_Canton",
#          # "Mandates",
#          "DateJoining",
#          "DateLeaving",
#          # "Citizenship",
#          # "DateOfBirth",
#          "DateOfDeath") %>%
#   mutate(DateJoining = dmy(DateJoining),
#          DateLeaving = dmy(DateLeaving),
#          DateOfDeath = dmy(DateOfDeath))  
# 
# # Anzeige mit datatable()
# datatable(elec_nationalrat_final,
#           class = 'nowrap',
#           filter = 'top',
#           options = list(pageLength = 7,
#                          scrollX = TRUE,
#                          search = list(regex = TRUE,
#                                        caseInsensitive = TRUE)))
```

```{r}
#| label: load_ständerat_old
#| eval: false
#| include: false
# 
# #################################################################################
# ## Der Datenexport von parlament.ch ist unvollständig. Es müssten per beliebigem ## Stichtag immer 200 National- und 46 Ständeräte sein, was nicht zutrifft. 
# ## Auserdem befinden sich Duplikate in den Daten.
# ## Es wird deshalb von einer Tagesgenauen Betrachtung abgesehen und stattdessen ## nur die Wahlergebnisse von 2019 und 2023 berücksichtigt.
# ## Zumindest solange, bis Daten korrekt publiziert sind.
# #################################################################################
# 
# # Ständerat: Daten einlesen
# elec_ständerat  <- read_excel("data/Ratsmitglieder_1848_DE_BUND_SR.xlsx")
# 
# # Struktur prüfen
# str(elec_ständerat)
# 
# # Fehlende Werte (NA), Klassen und Levels prüfen
# Abstract(elec_ständerat)
# PlotMiss(elec_ständerat)    
#     
# # Duplikate mittels Funktion ermitteln
# elec_ständerat_duplicates_check <- find_and_remove_duplicates(elec_ständerat)
#     # elec_nationalrat_duplicates$unique
#     # elec_nationalrat_duplicates$duplicates
# 
# # df mit unique Einträge weiterverwenden 
# elec_ständerat <- elec_ständerat_duplicates_check$unique
# 
# # Auf relevante Spalten reduzieren und Datumsformat anpassen
#     # Spaltenüberschriften konkateniert
#     # cat(paste(paste0('"', colnames(elec_nationalrat), '"'),collapse = ",\n"))
# 
# elec_ständerat_final <- elec_ständerat %>% 
#   select(# "Active",
#          # "FirstName",
#          # "LastName",
#          # "GenderAsString",
#          "CantonName",
#          "CantonAbbreviation",
#          # "CouncilName",
#          # "ParlGroupName",
#          # "ParlGroupAbbreviation",
#          "PartyName",
#          "PartyAbbreviation",
#          # "MaritalStatusText",
#          # "Nationality",
#          # "BirthPlace_City",
#          # "BirthPlace_Canton",
#          # "Mandates",
#          "DateJoining",
#          "DateLeaving",
#          # "Citizenship",
#          # "DateOfBirth",
#          "DateOfDeath") %>%
#   mutate(DateJoining = dmy(DateJoining),
#          DateLeaving = dmy(DateLeaving),
#          DateOfDeath = dmy(DateOfDeath))
# 
# # Anzeige mit datatable()
# datatable(elec_ständerat_final,
#           class = 'nowrap',
#           filter = 'top',
#           options = list(pageLength = 7,
#                          scrollX = TRUE,
#                          search = list(regex = TRUE,
#                                        caseInsensitive = TRUE)))
```

```{r}
#| label: combine_parliament_old
#| eval: false
#| include: false

# 
# # National- und Ständeratlisten kombinieren
# elec_nr_sr_combined <- bind_rows(
#   elec_nationalrat_final %>% mutate(role = "Nationalrat"),
#   elec_ständerat_final %>% mutate(role = "Ständerat")) %>%
#   select(role, everything())
# 
# 
# # Abstiummungsdatum (voting_5y_dates) als Spalten hinzufügen
# elec_nr_sr_combined <- elec_nr_sr_combined %>%
#   mutate(!!!setNames(rep(list(NA_integer_),
#                          length(voting_5y_dates)),
#                      voting_5y_dates))
# 
# # Ergänzen ob Ratsmitglied zum Zeitpunkt der Abstimmung aktiv war
# elec_nr_sr_combined <- elec_nr_sr_combined %>%
#   mutate(!!!setNames(
#     lapply(voting_5y_dates,
#            function(datum) {
#              abstimmungsdatum <- as.Date(datum)
#              with(., as.integer(                            # 1 der 0 zurück
#                DateJoining <= abstimmungsdatum &
#                  (is.na(DateLeaving) | DateLeaving >= abstimmungsdatum)))}
#            ), voting_5y_dates))
# 
# 
# write_xlsx(elec_nr_sr_combined, "temp_nr_sr.xlsx")
# 
# ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### 
# 
# 
# # Kanton- und Parteibezeichnungen zwecks Lookup/Vereinheitlichung in df schreiben 
# lookup_elec_nr_sr_combined_canton_label <- elec_nr_sr_combined %>% 
#   select(CantonAbbreviation, CantonName) %>% 
#   distinct()
# 
# 
# lookup_elec_nr_sr_combined_parties_label  <- elec_nr_sr_combined %>%
#   select(PartyAbbreviation, PartyName) %>%
#   distinct() %>%
#   rename(party_orig_value = PartyAbbreviation,
#          long_name = PartyName) %>%
#   mutate(prefix = NA_character_,
#          add_info = NA,
#          level = NA_character_,
#          source = "National_und_Ständerat",
#          short_name = party_orig_value %>%
#            str_replace("-.*", "") %>%         # ab dem ersten "-" abschneiden
#            str_replace("^M-E$", "Mitte") %>%  # "M-E" durch "Mitte" ersetzen
#          toupper())%>% 
#   select(party_orig_value,
#          short_name,
#          long_name,
#          prefix,
#          add_info,
#          level,
#          source)
```

#### National- & Ständerat kombinieren für weitere Bearbeitung

```{r}
#| label: combine_parliament

# Fussnoten aus Spaltenbeschriftungen entfernen
make.unique(colnames(elec_nationalrat))
colnames(elec_nationalrat) <- gsub(" \\d+$",
                                   "",
                                   colnames(elec_nationalrat))
make.unique(colnames(elec_nationalrat))


make.unique(colnames(elec_ständerat))
colnames(elec_ständerat) <- gsub(" \\d+$",
                                 "",
                                 colnames(elec_ständerat))
make.unique(colnames(elec_ständerat))


# df zusammenführen (Wide Format)
elec_nr_sr_combined_wide <- bind_rows(
  elec_nationalrat %>% mutate(role = "Nationalrat"),
  elec_ständerat %>% mutate(role = "Ständerat")) %>%
  select(role, everything())


# df ins Long Format umwandeln
elec_nr_sr_combined_long <- elec_nr_sr_combined_wide %>%
  pivot_longer(cols = matches("^\\d{4}$"),            # Spalten mit 4 Ziffern
               names_to = "election_year",
               values_to = "n_seats") %>%
  mutate(election_year = as.integer(election_year),   # Jahr als Zahl
         n_seats = as.numeric(n_seats))               # Sitze als Zahl oder NA

# Zeitreihe für jede Partei/role vervollständigen und Werte fortschreiben
elec_nr_sr_combined <- elec_nr_sr_combined_long %>%
  rename(party_orig_value = Partei) %>% 
  group_by(role, party_orig_value) %>%
  mutate(year = election_year) %>%                           # Jahrsspalte erzeugen
  complete(year = full_seq(range(election_year, na.rm = TRUE), 1),  # Alle Jahre
           fill = list(n_seats = NA, election_year = NA)) %>%
  arrange(role,
          party_orig_value,
          year) %>%
  fill(election_year,
       n_seats,
       .direction = "down") %>%
  ungroup()
  


# Dataframe analog anderer Staatsebenen in gleiche/ähnliche Struktur bringen
elec_nr_sr_combined <- elec_nr_sr_combined_long %>%
  rename(party_orig_value = Partei) %>%
  group_by(role,
           party_orig_value) %>%
  mutate(year = election_year) %>%                            # Jahrsspalte
  complete(year = full_seq(range(election_year,               # Alle Jahre
                                 na.rm = TRUE),
                                 1),                          # 1er Sequenz
           fill = list(n_seats = NA,
                       election_year = NA)) %>%
  arrange(role,                                               # Anordnen vor füllen
          party_orig_value,
          year) %>%
  # Block-Index: zählt, wie oft election_year gefüllt ist / neues Wahljahr beginnt
  mutate(block = cumsum(!is.na(election_year))) %>%
  group_by(role,
           party_orig_value,
           block) %>%
  fill(election_year,
       n_seats,
       .direction = "down") %>%
  ungroup() %>%
  select(-block) 


# Ratssitze pro Jahr (nach-)prüfen
elec_nr_sr_combined_sum_check <- elec_nr_sr_combined %>%
  group_by(year, role) %>%
  summarise(total_n_seats = sum(n_seats,
                                na.rm = TRUE),
    .groups = "drop") %>%
  print(n=Inf)
              
unique(elec_nr_sr_combined$party_orig_value)


```

##### Bund - Parteinamen

```{r}

# Partei-Labels identifizieren
lookup_elec_nr_sr_combined_parties_label  <- elec_nr_sr_combined %>%
  select(party_orig_value) %>%
  distinct() %>%
  mutate(party_orig_value = toupper(party_orig_value),
         short_name = party_orig_value,
         short_name = if_else(short_name == "DIE MITTE",      # Umbenennen
                              "MITTE",
                              short_name),
         short_name = if_else(short_name == "MCG (MCR)",      # Umbenennen
                              "MCG",
                              short_name),
         short_name = gsub("\\.", "", short_name),            # . entfernen
         long_name = NA_character_,
         prefix = NA_character_,
         add_info = NA,
         level = NA_character_,
         source = "National_und_Ständerat") %>%
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source) %>% print(n=Inf)
```

### Kantonsebene

#### Kantonale Regierung (Exekutive)

Die Kantonalen Abstimmungen finden nicht in allen kantonen gleichzeitg statt. Deshalb genauer die Räte/Konstellation zum Zeitpunkt der jeweiligen Abstimmung zu prüfen.

Die Struktur der "schön formatierten" Exceldatei lässt keinen "simplen" Import zu.

-   1 Excelsheet / Jahr

-   Header ist in Zeile 2 und nicht vollständig

-   Daten (für Kantone) starten in Zeile 4 aber enden auf Zeile 29 bevor es mit Kommentaren und Fussnoten weitergeht.

##### Dateipfad und gewünschte Sheets festlegen

```{r}
#| label: set_path_Kanton

dateipfad <- "data/je-d-17.02.06.01_KANTON_Kantonale_Regierungswahlen.xlsx"  

selected_sheets <- c("2024", "2023", "2022","2021","2020","2019")
```

##### Function

```{r}
#| label: load_function


import_election_data <- function(dateipfad, sheetname) {
  
  # Headerzeilen einlesen  
  header <- readxl::read_excel(dateipfad,
                               sheet = sheetname,
                               skip = 1,
                               n_max = 0) %>%
    names()
  
  # Header anpassen: Wahljahr vereinheitlichen und Kanton hinzufügen
  header[grepl("^Wahljahr", header)] <- "Wahljahr" 
  header <- c("Kanton", header)
        
  # Daten ab Zeile 4 importieren
  daten_raw <- read_excel(dateipfad,
                          sheet = sheetname,
                          skip = 3,
                          col_names = header)
  
  # Zeilen ohne "Wahljahr" ausschliessen
  wahljahr_col <- names(daten_raw)[grepl("^Wahljahr",
                                         names(daten_raw))][1]
  names(daten_raw)[names(daten_raw) == wahljahr_col] <- "Wahljahr"

  daten_wide <- daten_raw %>%
    filter(!is.na(suppressWarnings(as.numeric(.data[[wahljahr_col]]))))
  
  # Zu pivotierenden Spalten in numeric umwandeln
  cols_pivot <- setdiff(names(daten_wide),
                        c("Kanton", wahljahr_col))
  daten_wide <- daten_wide %>%
    mutate(across(all_of(cols_pivot),
                  as.numeric))
    
  # 6. Pivotieren
  daten_long <- daten_wide %>%
    pivot_longer(
      cols = all_of(cols_pivot),
      names_to = "Partei",
      values_to = "Wert")
  
  return(daten_long)
}
```

##### Function ausführen: Import und Konsolidation

```{r}
#| label: run_function

# Objekt erstellen, mit Sheets als tibble/dataframe
daten_liste <- setNames(lapply(selected_sheets,
                               function(sheet) import_election_data (dateipfad,
                                                                     sheet)),
                        selected_sheets)

str(daten_liste)
lapply(daten_liste, summary)

# Alle tibbles zu einem Dataframe zusammenfügen
elec_kantonale_regierung_combined <- bind_rows(daten_liste,
                                               .id = "year") %>%
  rename(election_year = Wahljahr,
         party_orig_value = Partei,
         n_seats = Wert) %>%
  mutate(role = "Kantonsregierung") %>% 
  filter(party_orig_value != "Total") %>%
  left_join(lookup_kantone, by = "Kanton") %>%
  select(role,
         party_orig_value,
         year,
         election_year,
         n_seats,
         Kt,
         Kanton,
         everything())

# Ratssitze pro Jahr (nach-)prüfen
elec_kantonale_regierung_sum_check <- elec_kantonale_regierung_combined %>%
  group_by(year, role) %>%
  summarise(total_n_seats = sum(n_seats,
                                na.rm = TRUE),
    .groups = "drop") %>%
  print(n=Inf)

 
datatable(elec_kantonale_regierung_combined,
          class = 'nowrap',
          filter = 'top',
          options = list(pageLength = 7,
                         scrollX = TRUE,
                         search = list(regex = TRUE,
                                       caseInsensitive = TRUE)))
```

##### Kanton - Parteinamen

```{r}

# Parteinamenvarianten
unique(elec_kantonale_regierung_combined$party_orig_value)

# Parteien zwecks Lookup/Vereinheitlichung in df schreiben
lookup_kantonale_regierung_parties_label <- elec_kantonale_regierung_combined %>%
  mutate(level = NA_character_,
         long_name = NA_character_,
         source = "Kantonale_Regierung",
         
         add_info = str_extract(party_orig_value,
                                "\\d+(?=\\)?$)"),  # Zahl am Ende/vor Klammer-Ende
         short_name = str_remove(party_orig_value,
                                 "\\s*\\d+\\)?$"), # - Leerzeichen/Zahl/Klammer
         prefix = NA_character_) %>%
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source) %>%
  # Großschreibung der short_name-Spalte
  mutate(short_name = toupper(short_name)) 
 
# Output prüfen (unique/distinct)
lookup_kantonale_regierung_parties_label %>% distinct() %>% print(n = Inf)
```

### Gemeindeebene

#### Exekutiven der statistischen Städte

-   1 Excelsheet / Jahr

-   Header zweizeilig mit Start in Zeile –\> 3 `skip = 2, n_max = 2,`

-   Teils verbundene Header-Zeilen (vertikal/horizontal)

-   Cluster Einwohnerzahlen unterteilt Daten

-   Parteinamen uneinheitlich aufgrund von Fussnoten

--\> Datenformat "wide" zuerst bereinigen und ins "long" Format bringen

##### Dateipfad und gewünschte Sheets festlegen

```{r}
#| label: set_path_Gemeinde

dateipfad <- "data/je-d-17.02.07.01_GEMEINDE_Die Exekutiven der statistischen Städte.xlsx"

selected_sheets <- c("2024", "2023", "2022","2021","2020","2019") 
```

##### Function für den Import der Gemeindedaten

```{r}
#| label: load_function_Gemeinde

importiere_sheet <- function(dateipfad, sheetname) {

      ###################################################################
      ########## DATEN IMPORTIEREN ######################################
      ########## Header definieren ######################################
      ###################################################################
      
      
      # Headerzeilen einlesen
      header <- suppressMessages(read_excel(dateipfad,
                   sheet = sheetname,
                   skip = 2,
                   n_max = 2,
                   col_names = FALSE))
      
      # Daten  einlesen
      daten_raw <- suppressMessages(read_excel(dateipfad,
                              sheet = sheetname,
                              skip = 5,
                              col_names = FALSE))
      
      
      # Die Spaltennamen zusammensetzen
      # Leere Zellen in 1. Headerzeile mit Werten von rechts auffüllen wenn leer/NA
      header_filled <- as.data.frame(t(header))   # t() "matrix transpose"
      header_filled <- fill(header_filled,        
                            V1,                   # Header Spalte 1 (V1) auffüllen
                            .direction = "down")  # Werte nach unten übernehmen
      header_filled <- t(header_filled)           # t() nochmals (zurück)
      
      # Spaltennamen kombinieren
      spaltennamen <- paste(header_filled[1, ],
                            header_filled[2, ],
                            sep = "_")
      spaltennamen <- gsub("_NA|NA_","", spaltennamen) # Entfernt überflüssige NAs
      
      # Spaltennamen zuweisen
      colnames(daten_raw) <- spaltennamen
      
      
      ###################################################################
      ########## TRANSPONIEREN ##########################################
      ########## Gemeindegrössen Cluster ################################
      ###################################################################
      
      
      # Cluster Einwohnerzahl als Spalte verwenden
      daten_wide <- daten_raw %>%
        mutate(Gemeindegrösse_Cluster =             # Name der neuen Spalte
                 ifelse(
                   is.na(                           # 4) auf NA prüfen
                     suppressWarnings(        # 3) Warnung aus (z.B. "≥ ..Einw..")
                     as.numeric(                    # 2) Wert als Zahl 
                     gsub("'", "", `Kantons-Nr.`)   # 1) Tausender Zeichen (')                                                              entfernen
                   ))),
                   as.character(`Kantons-Nr.`),     # 5) Wert von "Kantons-Nr" 
                   NA_character_                    #    sonst NA   
                 ))  %>%
        fill(Gemeindegrösse_Cluster,
             .direction = "down") %>%              # Cluster nach unten auffüllen
        filter(!is.na(suppressWarnings(
          as.numeric(gsub("'", "", `Kantons-Nr.`))))) # Herausfiltern von Zeilen                                                           mit NICHT-numerischem Wert
    
    
    # Ansicht (Snapshot) nach transponieren
    daten_wide[1:10,                    # 10 Zeilen
               c(1:10,                  # 10 Spalten +
                 ncol(daten_wide))]     # Letzte Spalte
                                        # ncol() von df daten_wide --> Anz. Spalten
                                        # Anzahl Spalten = Position letzte Spalte
    
    
    
    ###################################################################
    ########## TRANSPONIEREN ##########################################
    ########## Frauen, Männer, Total & Parteien ## ####################
    ###################################################################
    
    
    
    daten_long <- daten_wide %>%
      mutate(across(matches("(_Frauen|_Männer|_Total)$"),
                    ~ suppressWarnings(as.numeric(.)))) %>%       # Werte numerisch
      pivot_longer(cols = matches("(_Frauen|_Männer|_Total)$"),   # Spaltenauswahl
                   names_to = c("party_orig_value", "m_w_Total"),  # Label-Spalte
                   names_pattern = "^(.*)_(Frauen|Männer|Total)$",# RegEx
                   values_to = "Wert")                            # Wert-Spalte
    
    return(daten_long)

}
```

##### Function ausführen: Import der Dateien testen

```{r}
#| label: run_test_function_Gemeinde


for (sheet in selected_sheets) {
  cat("\n-----------------------------\n")
  cat("Versuche Sheet:", sheet, "\n")
  result <- tryCatch({
    dat <- importiere_sheet(dateipfad, sheet)
    cat("Sheet erfolgreich eingelesen:", sheet, "\n")
    # Zusammenfassung:
    cat("Anzahl Zeilen:", nrow(dat), "\n")
    cat("Anzahl Spalten:", ncol(dat), "\n")
    cat("Spaltennamen (erste 15):", paste(names(dat)[1:min(15, ncol(dat))], collapse = ", "), "\n")
    TRUE
  }, error = function(e) {
    cat("Fehler beim Einlesen von Sheet:", sheet, "\n")
    cat("Fehlermeldung:", e$message, "\n")
    FALSE
  })
}
```

##### Function ausführen: Import und Konsolidation

```{r}
#| label: run_function_Gemeinde

# Objekt erstellen, mit Sheets als tibble/dataframe
daten_liste <- setNames(lapply(selected_sheets,
                               function(sheet) importiere_sheet(dateipfad, sheet)),
                        selected_sheets)

str(daten_liste)
# lapply(daten_liste, summary)


# Alle tibbles zu einem Dataframe zusammenfügen
elec_gemeinde_exekutiven_combined <- bind_rows(daten_liste,
                                            .id = "year") %>% 
  filter(m_w_Total == "Total",
         party_orig_value != "Total") %>% 
  mutate(role = "Gemeindeexekutive") %>%
  rename(election_year = Wahljahr,
         n_seats = Wert,
         Kt = Kanton) %>% 
  select(-c('Grössenklasse-Nr.',
            Grössenklasse,
            `Kantons-Nr.`,
            m_w_Total)) %>%
  left_join(lookup_kantone, by = "Kt") %>%
  select(role,
         party_orig_value,
         year,
         election_year,
         n_seats,
         Kt,
         Kanton,
         everything())
  
  




# Ratssitze pro Jahr (nach-)prüfen
elec_gemeinde_exekutiven_sum_check <- elec_gemeinde_exekutiven_combined %>%
  group_by(year) %>%                         # Gruppieren nach Jahr
  summarise(summe = sum(n_seats, na.rm = TRUE)) # Summe berechnen, NAs ignorieren





# TODO Grosses Datatable, deshalb auskommentieren oder ander Lösung..
# datatable(elec_gemeinde_exekutiven_combined,
#           class = 'nowrap',
#           filter = 'top',
#           options = list(pageLength = 7,
#                          scrollX = TRUE,
#                          search = list(regex = TRUE,
#                                        caseInsensitive = TRUE)))


# Parteinamenvarianten
unique(elec_gemeinde_exekutiven_combined$party_orig_value)

# Parteien zwecks Lookup/Vereinheitlichung in df schreiben
lookup_gemeinde_exekutiven_parties_label <- elec_gemeinde_exekutiven_combined %>%
  mutate(add_info = str_extract(party_orig_value,
                                "\\d+(?=\\)?$)"),  # Zahl am Ende/vor Klammer-Ende
         short_name = str_remove(party_orig_value,
                                 "\\s*\\d+\\)?$"), # - Leerzeichen/Zahl/Klammer
         long_name = NA_character_, 
         prefix = NA_character_,
         level = NA_character_,
         source = "Gemeinde_Exekutiven") %>% 
  # Großschreibung der short_name-Spalte
  mutate(short_name = toupper(short_name))%>% 
  select(party_orig_value,
         short_name,
         long_name,
         prefix,
         add_info,
         level,
         source)
  



# Output prüfen (unique/distinct)
lookup_gemeinde_exekutiven_parties_label %>% distinct() %>% print(n = Inf)


```

## Parteilandschaft

```{r}
#| label: load_parties_rating

parties_rating <- read_excel("data/parties_economic_socio-political_rating.xlsx",
                             sheet = "matrix_eco-socio_enhanced")
```

## Lookup tables

### Parteinamen

Die verschiedenen Quellen verwenden teils unteschiedliche Parteibezeichnungen. Zur Vereinheitlichung wird deshalb initial eine Lookup Tabelle gebildet.

```{r}
#| label: load_parties

# National- und Ständerat
print(lookup_elec_nr_sr_combined_parties_label %>%
        distinct(),
      n = 3)

# Kantonale Regierung
print(lookup_kantonale_regierung_parties_label %>%
        distinct(),
      n = 3)

# Gemeinde Exekutiven
print(lookup_gemeinde_exekutiven_parties_label %>%
        distinct(),
      n = 3)

# Abstimmungen
print(lookup_voting_parties_label %>%
        distinct(),
      n = 3)


# Alle Dataframes zu einem zusammenführen, Duplikate entfernen und Master joinen
lookup_all_parties <- bind_rows(
  lookup_elec_nr_sr_combined_parties_label,
  lookup_kantonale_regierung_parties_label,
  lookup_gemeinde_exekutiven_parties_label,
  lookup_voting_parties_label)%>%
  distinct() %>% 
  left_join(lookups_codebook_parties %>%
              select(short_name,
                     Partei,
                     Parteiname),
            by = "short_name") %>%
  select(Partei,
         Parteiname,
         everything())

write_xlsx(lookup_all_parties, "lookup_all.xlsx")
```

# Transformation & visualization

## Abstimmungen

```{r}


# Relevante Felder selektionieren
voting_5y %>%
  select(anr,
         datum,
         titel_kurz_d,
         titel_off_d,
         rechtsform, #1 Obligatorisches Referendum
                     #2 Fakultatives Referendum
                     #3 Volksinitiative
                     #4 Direkter Gegenentwurf zu einer Volksinitiative
                     #5 Stichfrage
         dep,
         `br-pos`,   #1 Befürwortend
                     #2 Ablehnend
                     #3 Keine
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
                     #9 Vorzug für die Volksinitiative (bei Stichfragen)
                     #. Missing
         legisjahr,
         `pa-iv`,
         `bv-pos`,   #1 Befürwortend
                     #2 Ablehnend
                     #3 Keine Abstimmungsempfehlung des Parlaments
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
         `nr-pos`,   #1 Befürwortende Mehrheit im Nationalrat
                     #2 Ablehnende Mehrheit im Nationalrat
                     #3 Keine Abstimmungsempfehlung des Nationalrats
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
         nrja,
         nrnein,
         `sr-pos`,   #1 Befürwortende Mehrheit im Ständerat
                     #2 Ablehnende Mehrheit im Ständerat
                     #3 Keine Abstimmungsempfehlung des Ständerats
                     #8 Vorzug für den Gegenentwurf (bei Stichfragen)
         srja,
         srnein,
         # Parteiparolen
         starts_with("p-"),
                     #1 Ja-Parole
                     #2 Nein-Parole
                     #3 keine Parole abzugeben
                     #4 empfahl, einen leeren Stimmzettel einzulegen
                     #5 Stimmfreigabe
                     #8 Bevorzugung des Gegenentwurfs (bei Stichfrage)
                     #9 Bevorzugung der Volksinitiative (bei Stichfrage)
                     #66 Neutral: keine Parole oder Empfehlung auf leer einlegen                        #9999 Organisation existiert nicht
                     #. Unbekannt
         # Parteiparolen Kanton / Parteisektion
         starts_with("p-dev-"),
                     #1 Ja-Parole
                     #2 Nein-Parole
                     #3 keine Parole abzugeben
                     #4 empfahl, einen leeren Stimmzettel einzulegen
                     #5 Stimmfreigabe
                     #8 Bevorzugung des Gegenentwurfs (bei Stichfrage)
                     #9 Bevorzugung der Volksinitiative (bei Stichfrage)
                     # [leer] Parole gleich wie Mutterpartei (oder unbekannt)         
         volk,       #0 Eine Mehrheit der Abstimmenden hat die Vorlage abgelehnt
                     #1 Eine Mehrheit der Abstimmenden hat die Vorlage angenommen
                     #8 Bei Stichfragen:  Mehrheit für Gegenentwurfs
                     #9 Bei Stichfragen:  Mehrheit Volksinitiative
         stand,
                     #0 Die Vorlage hat keine Mehrheit der Standesstimmen er-reicht
                     #1 Die Vorlage hat die Mehrheit der Standesstimmen erreicht
                     #3 Ständemehr nicht notwendig
                     #8 Bei Stichfragen: Mehrheit für Gegenentwurf
                     #9 Bei Stichfragen: Mehrheit für Volksinitiative
         annahme,    #0 Ablehnung der Vorlage
                     #1 Annahme der Vorlage
                     #8 Bei Stichfragen: Gegenentwurf angenommen
                     #9 Bei Stichfragen: Volksinitiative angenommen
                     #. Bei Stichfragen: Ergebnis der Stichfrage obsolet
         berecht,
         stimmen,
         bet,
         leer,
         ungultig,
         gultig,
         volkja,
         volknein,
         `volkja-proz`)


```

## Wahlen: Parteistärken per Abstimmungstag je Staatsebene

##### Bundesebene

```{r}

elec_nr_sr_combined

elec_kantonale_regierung_combined

elec_gemeinde_exekutiven_combined

lookup_all_parties

# <- elec_nr_sr_combined %>%  select(role,
#                                                                  Partei,
#                                                                  starts_with("2"))




```

## Parteilandschaft

### Multi-Dimensions-Model

#### Minimalwerte

Für jede Partei den Minimalwert des Abstimmungsverhaltens zu verwenden, basiert auf der Zielsetzung, die klarste politische Position einer Partei in einem bestimmten Themenbereich zu identifizieren. Diese Methodik stellt sicher, dass auch bei wenigen Abweichungen von der Mehrheitslinie die tatsächliche Haltung der Partei deutlich erkennbar bleibt.

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_min_x,
           y = socio_pct_min_y,
           label = Partei)) +
  geom_point(size = 3) +
  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(0, 100)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Grundlage: Minimalwerte des Abstimmungsverhaltens") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 105),
                  xlim = c(0, 105),
                  clip = "off")

```

#### Durchschnittswerte als Zentrum und Min/Max als Ellipse

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_avg_x,
           y = socio_pct_avg_y,
           label = Partei)) +
  geom_ellipse(
    aes(x0 = eco_pct_avg_x,
        y0 = socio_pct_avg_y,
        a = (eco_pct_max_x - eco_pct_min_x) / 2, # Halbachse x
        b = (socio_pct_max_y - socio_pct_min_y) / 2, # Halbachse y
        angle = 0),
    fill = "gray80", alpha = 0.4) +
  geom_point(size = 3) +
  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(-10, +110)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Grundlage: Durchschnitt des Abstimmungsverhaltens als Zentrum, Min-/Max als Ellipse") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 100),
                  xlim = c(0, 100),
                  clip = "off")
```

#### Hauptparteien: Durchschnittswerte als Zentrum und Min/Max als Ellipse / Klein- und Regionalparteien nur mit ihrem Durchschnittswert

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_avg_x,
           y = socio_pct_avg_y,
           label = Partei)) +
  geom_ellipse(aes(x0 = eco_pct_avg_x,
                   y0 = socio_pct_avg_y,
                   a = (eco_pct_max_x - eco_pct_min_x) / 2, # Halbachse x
                   b = (socio_pct_max_y - socio_pct_min_y) / 2, # Halbachse y
                   angle = 0),
               fill = "gray80", alpha = 0.4) +
  geom_point(size = 3) +
  
  # Kleinere Parteien
  geom_point(data = subset(parties_rating,
                           `Grosse Partei` == "n" &
                             Relevanz_nationale_Abstimmungen != "-"),
             aes(x = eco_x,
                 y = socio_y),
             shape = 21, fill = "grey", color = "black", size = 1, stroke = 1) +
  
  # Labels der kleineren Partein
  geom_text(data = subset(parties_rating,
                          `Grosse Partei` == "n" &
                            Relevanz_nationale_Abstimmungen != "-"),
            aes(x = eco_x,
                y = socio_y,
                label = Partei),
            vjust = -1, fontface = "plain", color = "darkgrey") +
  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(-10, +110)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Durchschnitt des Abstimmungsverhaltens als Zentrum, Min-/Max als Ellipse") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 100),
                  xlim = c(0, 100),
                  clip = "off")
```

#### Hauptparteien: Durchschnittswerte als Zentrum und Min/Max als Ellipse / Verbände sowie Klein- und Regionalparteien nur mit ihrem Durchschnittswert

```{r}

ggplot(parties_rating,
       aes(x = eco_pct_avg_x,
           y = socio_pct_avg_y,
           label = Partei)) +
  geom_ellipse(
    aes(x0 = eco_pct_avg_x,
        y0 = socio_pct_avg_y,
        a = (eco_pct_max_x - eco_pct_min_x) / 2, # Halbachse x
        b = (socio_pct_max_y - socio_pct_min_y) / 2, # Halbachse y
        angle = 0),
    fill = "gray80", alpha = 0.4) +
  geom_point(size = 3) +
  
  # Kleinere Parteien
  geom_point(data = subset(parties_rating,
                           `Grosse Partei` == "n" #&
                           #Relevanz_nationale_Abstimmungen != "-"
                           )
                  ,
    aes(x = eco_x, y = socio_y),
    shape = 21, fill = "grey", color = "black", size = 1, stroke = 1
  ) +
  # Labels der kleineren Partein
  geom_text(data = subset(parties_rating,
                          `Grosse Partei` == "n" #&
                          #Relevanz_nationale_Abstimmungen != "-"
                  )
                  ,
    aes(x = eco_x, y = socio_y, label = Partei),
    vjust = -1, fontface = "plain", color = "darkgrey"
  ) +

  geom_text(vjust = -0.8) +
  geom_segment(aes(x = 50, xend = 50,
                   y = 0, yend = 100), linetype = "dashed", color = "blue") +
  geom_segment(aes(x = 0, xend = 100,
                   y = 50, yend = 50), linetype = "dashed", color = "blue") +
  annotate("text",
           x = 0,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Links/staatsgläubig", size = 4, hjust = 0.5) +
  annotate("text",
           x = 100,
           y = min(parties_rating$socio_pct_min_y) + 55,
           label = "Rechts/marktwirtschaftlich", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) - 3,
           label = "Autoritär/Konservativ", size = 4, hjust = 0.5) +
  annotate("text",
           x = 50,
           y = min(parties_rating$socio_pct_min_y) + 103,
           label = "Libertär/Progressiv", size = 4, hjust = 0.5) +
  scale_x_continuous(limits = c(-10, +110)) +
  labs(x = "Wirtschaftspolitisch",
       y = "Gesellschaftspolitisch",
       title = "Politische Positionierung im Zwei-Achsen-Modell",
       subtitle = "Grundlage: Durchschnitt des Abstimmungsverhaltens als Zentrum, Min-/Max als Ellipse") +
  theme_minimal()+
  theme(plot.title = element_text(size = 18,
                                  margin = margin(b = 30)),
        axis.title.x = element_text(size = 14,
                                    margin = margin(t = 5)),
        axis.title.y = element_text(size = 14,
                                    margin = margin(r = 5))) +
  coord_cartesian(ylim = c(0, 100),
                  xlim = c(0, 100),
                  clip = "off")
```

### 3D-Koordinatensystem (Testweise)

```{r}
#install.packages("plotly")

library(plotly)

# Datenframe erstellen
parties <- data.frame(
  Partei = c("SP", "SVP", "FDP", "GPS", "GLP", "Mitte", "EVP", "EDU"),
  Wirtschaft = c(20, 85, 80, 30, 60, 60, 40, 90),      # Links = niedrig, Rechts = hoch
  Gesellschaft = c(90, 20, 55, 90, 75, 45, 50, 20),    # Libertär = hoch, Autoritär = niedrig
  Kosmopolitismus = c(90, 15, 60, 95, 85, 50, 55, 20)  # Kosmopolitisch = hoch, Nationalistisch = niedrig
)

# Interaktives 3D-Scatterplot mit Plotly
fig <- plot_ly(
  data = parties,
  x = ~Wirtschaft,
  y = ~Gesellschaft,
  z = ~Kosmopolitismus,
  text = ~Partei,
  type = 'scatter3d',
  mode = 'markers+text',
  marker = list(size = 5),
  textposition = 'top center'
)

# Achsen benennen und Layout anpassen
fig <- fig %>% layout(
  scene = list(
    xaxis = list(title = "Wirtschaftspolitik (links – rechts)"),
    yaxis = list(title = "Gesellschaftspolitik (autoritär – libertär)"),
    zaxis = list(title = "Kosmopolitismus – Nationalismus")
  ),
  title = "Schweizer Parteien im 3D-Koordinatensystem nach Kitschelt"
)

# Plot anzeigen
fig


```
